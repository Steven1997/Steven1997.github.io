<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XJY&#39;s Blog</title>
  
  <subtitle>你要静候再静候 就算失收始终要守</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://habitdiary.cn/"/>
  <updated>2017-10-11T14:12:54.848Z</updated>
  <id>http://habitdiary.cn/</id>
  
  <author>
    <name>谢均宇</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>动态规划之区间dp</title>
    <link href="http://habitdiary.cn/2017/10/11/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E4%B9%8B%E5%8C%BA%E9%97%B4dp/"/>
    <id>http://habitdiary.cn/2017/10/11/动态规划之区间dp/</id>
    <published>2017-10-11T08:11:11.000Z</published>
    <updated>2017-10-11T14:12:54.848Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>区间dp，顾名思义就是在一段区间上进行动态规划。对于每段区间，他们的最优值都是由几段更小区间的最优值得到，是分治思想的一种应用，将一个区间问题不断划分为更小的区间直至一个元素组成的区间，枚举他们的组合 ，求合并后的最优值。  </p><h3 id="算法结构"><a href="#算法结构" class="headerlink" title="算法结构"></a>算法结构</h3><p>设F[i,j]（1&lt;=i&lt;=j&lt;=n）表示区间[i,j]内的数字相加的最小代价<br>每次用变量k（i&lt;=k&lt;=j-1）将区间分为[i,k]和[k+1,j]两段  </p><p>For l:=2 to n do // 枚举区间长度<br>for i:=1 to n do // 枚举区间的左端点<br>begin<br>j:=i+l-1; // 计算区间的右端点,因为区间长度和左端点循环嵌套枚举，保证了[i,j]内的所有子区间都被枚举到<br>if j&gt;n then break; // 保证了下标不越界<br>for k:= i to j-1 do // 状态转移，去推出 f[i,j]<br>f[i , j]= max{f[ i,k]+ f[k+1,j]+ w[i,j] }<br>end;   </p><p>这个结构必须记好，这是区间动态规划的代码结构。  </p><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><h3 id="石子合并"><a href="#石子合并" class="headerlink" title="石子合并"></a>石子合并</h3><p>题目链接:<a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=737" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=737</a></p><p>题意:有N堆石子排成一排，每堆石子有一定的数量。现要将N堆石子并成为一堆。合并的过程只能每次将相邻的两堆石子堆成一堆，每次合并花费的代价为这两堆石子的和，经过N-1次合并后成为一堆。求出总的代价最小值。 </p><p>分析:要求n个石子归并，我们根据dp的思想划分成子问题，先求出每两个合并的最小代价，然后每三个的最小代价，依次知道n个。<br>定义状态dp[i][j]为从第i个石子到第j个石子的合并最小代价。<br>那么dp[i][j] = min(dp[i][k] + dp[k+1][j])<br>那么我们就可以从小到大依次枚举让石子合并，直到所有的石子都合并。<br>这个问题可以用到平行四边形优化，用一个s[i][j]=k 表示区间 i—j 从k点分开才是最优的，这样的话我们就可以优化掉一层复杂度，变为O（n^2）  </p><p>代码1(无优化)<br> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 210</span></div><div class="line">    <span class="keyword">int</span> dp[N][N],sum[N];</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> a[N];sum[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">                sum[i]=sum[i<span class="number">-1</span>]+a[i];<span class="comment">//因为要求解区间和，先维护前缀和</span></div><div class="line">            &#125;</div><div class="line">            <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</div><div class="line">            <span class="keyword">int</span> i,j,l,k;</div><div class="line">            <span class="keyword">for</span>(l = <span class="number">2</span>; l &lt;= n; ++l)<span class="comment">//枚举区间长度</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n - l + <span class="number">1</span>; ++i)<span class="comment">//枚举区间左端点</span></div><div class="line">                &#123;</div><div class="line">                    j = i + l - <span class="number">1</span>;<span class="comment">//根据左端点和区间长度求区间右端点</span></div><div class="line">                    <span class="keyword">if</span>(j &gt; n)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                    dp[i][j] = <span class="number">0x3f3f3f3f</span>;</div><div class="line">                    <span class="keyword">for</span>(k = i; k &lt; j; ++k)</div><div class="line">                    &#123;</div><div class="line">                        dp[i][j] = min(dp[i][j],dp[i][k] + dp[k + <span class="number">1</span>][j] + sum[j] - sum[i<span class="number">-1</span>]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[<span class="number">1</span>][n]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"> ```   </div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">代码<span class="number">2</span>(平行四边形优化)    </div><div class="line"> ```cpp</div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">define</span> N 210</span></div><div class="line">    <span class="keyword">int</span> dp[N][N],sum[N],s[N][N];</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">int</span> n;</div><div class="line">        <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> a[N];sum[<span class="number">0</span>]=<span class="number">0</span>;</div><div class="line">            <span class="built_in">memset</span>(s,<span class="number">0</span>,<span class="keyword">sizeof</span>(s));</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line">                s[i][i]=i;</div><div class="line">                sum[i]=sum[i<span class="number">-1</span>]+a[i];<span class="comment">//因为要求解区间和，先维护前缀和</span></div><div class="line">            &#125;</div><div class="line">            <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</div><div class="line">            <span class="keyword">int</span> i,j,l,k;</div><div class="line">            <span class="keyword">for</span>(l = <span class="number">2</span>; l &lt;= n; ++l)<span class="comment">//枚举区间长度</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= n - l + <span class="number">1</span>; ++i) <span class="comment">//枚举区间左端点</span></div><div class="line">                &#123;</div><div class="line">                    j = i + l - <span class="number">1</span>;<span class="comment">//根据左端点和区间长度求区间右端点</span></div><div class="line">                    <span class="keyword">if</span>(j &gt; n)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                    dp[i][j] = <span class="number">0x3f3f3f3f</span>;</div><div class="line">                    <span class="keyword">for</span>(k = s[i][j<span class="number">-1</span>]; k &lt;= s[i+<span class="number">1</span>][j]; ++k)<span class="comment">//四边形优化</span></div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">if</span>(dp[i][j]&gt;dp[i][k] + dp[k + <span class="number">1</span>][j] + sum[j] - sum[i<span class="number">-1</span>])</div><div class="line">                             &#123;</div><div class="line">                                    dp[i][j]=dp[i][k] + dp[k + <span class="number">1</span>][j] + sum[j] - sum[i<span class="number">-1</span>];</div><div class="line">                                    s[i][j]=k;</div><div class="line">                             &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[<span class="number">1</span>][n]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"> ```  </div><div class="line"></div><div class="line"></div><div class="line">### 括号匹配  </div><div class="line">题目链接：&lt;http:<span class="comment">//poj.org/problem?id=2955&gt;  </span></div><div class="line"></div><div class="line">题意:给出一串的只有‘（’ ‘）’  '[‘  ']'四种括号组成的串，让你求解需要最少添加括号数让串中的所有括号完全匹配。  </div><div class="line"></div><div class="line">分析：  </div><div class="line">定义dp [ i ] [ j ] 为串中第 i 个到第 j 个括号的最大匹配数目   </div><div class="line"><span class="number">1.</span>如果第 i 个和第 j 个匹配,则dp [ i ] [ j ] = dp [ i+<span class="number">1</span> ] [ j<span class="number">-1</span> ] + <span class="number">2</span> ;  </div><div class="line"><span class="number">2.</span>如果第 i 个和第 j 个不匹配，枚举中间分割点k(i &lt;= k &lt; j)</div><div class="line">dp[ i ] [ j ] = max ( dp [ i ] [ j ] , dp [ i ] [ k ] + dp [ k+<span class="number">1</span> ] [ j ] )   </div><div class="line"></div><div class="line">代码  </div><div class="line">```cpp  </div><div class="line">    #include &lt;iostream&gt;</div><div class="line">    #include &lt;cstring&gt;</div><div class="line">    #include &lt;algorithm&gt;</div><div class="line">    #include &lt;<span class="built_in">string</span>&gt;</div><div class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span>  N = <span class="number">120</span>;</div><div class="line">    <span class="keyword">int</span> dp[N][N];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="built_in">string</span> s;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s==<span class="string">"end"</span>)</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</div><div class="line">            <span class="keyword">int</span> n = s.size();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> len = <span class="number">2</span>;len &lt;= n;len++)<span class="comment">//枚举区间长度</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= n - len; i++)<span class="comment">//枚举区间左端点</span></div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">int</span> j = i + len - <span class="number">1</span>;<span class="comment">//确定区间右端点</span></div><div class="line">                    <span class="keyword">if</span>(j &gt; n)</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                    <span class="keyword">if</span>(s[i]==<span class="string">'('</span>&amp;&amp;s[j]==<span class="string">')'</span> || s[i]==<span class="string">'['</span>&amp;&amp;s[j]==<span class="string">']'</span>)</div><div class="line">                        dp[i][j]=dp[i+<span class="number">1</span>][j<span class="number">-1</span>]+<span class="number">2</span>;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k=i;k&lt;j;k++)</div><div class="line">                        dp[i][j]=max(dp[i][j],dp[i][k]+dp[k+<span class="number">1</span>][j]);<span class="comment">//枚举中间位置,注意j不取等号</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;dp[<span class="number">0</span>][n<span class="number">-1</span>]&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">```   </div><div class="line"></div><div class="line"></div><div class="line">如果要求打印路径，即输出匹配后的括号  </div><div class="line"></div><div class="line">题目链接: &lt;http:<span class="comment">//poj.org/problem?id=1141&gt;  </span></div><div class="line"></div><div class="line">代码:  </div><div class="line">```cpp</div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">int</span>  N = <span class="number">120</span>;</div><div class="line">    <span class="keyword">int</span> dp[N][N],pos[N][N];   <span class="comment">/*定义pos【i】【j】表示 i 到 j 从哪儿分开使得匹配添加括号最少，如果i和j匹配我们可以让pos【i】【j】=-1；*/</span></div><div class="line">    <span class="built_in">string</span> s;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">if</span>(i&gt;j)  <span class="keyword">return</span>;</div><div class="line">        <span class="keyword">if</span>(i==j)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(s[i]==<span class="string">'('</span>||s[i]==<span class="string">')'</span>) <span class="built_in">cout</span>&lt;&lt;<span class="string">"()"</span>;</div><div class="line">            <span class="keyword">else</span>      <span class="built_in">cout</span>&lt;&lt;<span class="string">"[]"</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span>(pos[i][j]==<span class="number">-1</span>)</div><div class="line">            &#123;</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;s[i];</div><div class="line">                show(i+<span class="number">1</span>,j<span class="number">-1</span>);</div><div class="line">                <span class="built_in">cout</span>&lt;&lt;s[j];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                show(i,pos[i][j]);</div><div class="line">                show(pos[i][j]+<span class="number">1</span>,j);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;s)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</div><div class="line">            <span class="keyword">int</span> len=s.size();</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;len; i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>,k=i; k&lt;len; j++,k++)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">if</span>(s[j]==<span class="string">'('</span>&amp;&amp;s[k]==<span class="string">')'</span> || s[j]==<span class="string">'['</span>&amp;&amp;s[k]==<span class="string">']'</span>)</div><div class="line">                    &#123;</div><div class="line">                        dp[j][k]=dp[j+<span class="number">1</span>][k<span class="number">-1</span>]+<span class="number">2</span>;</div><div class="line">                        pos[j][k]=<span class="number">-1</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> f=j; f&lt;k; f++)</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">if</span>(dp[j][f]+dp[f+<span class="number">1</span>][k]&gt;=dp[j][k])</div><div class="line">                        &#123;</div><div class="line">                            dp[j][k]=dp[j][f]+dp[f+<span class="number">1</span>][k];</div><div class="line">                            pos[j][k]=f;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            show(<span class="number">0</span>,len<span class="number">-1</span>);</div><div class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><h3 id="整数划分"><a href="#整数划分" class="headerlink" title="整数划分"></a>整数划分</h3><p>题目链接：<a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=746" target="_blank" rel="external">http://acm.nyist.net/JudgeOnline/problem.php?pid=746</a>  </p><p>题意:  给出两个整数 n , m ,要求在 n 中加入m - 1 个乘号，将n分成m段，求出这m段的最大乘积  </p><p>分析: 区间dp，设dp[i][j] 表示在区间[0, i]之中，插入j个乘号可以得到的最大数<br>设a[i][j]为区间[i,j]所形成的数<br>所以 dp[i][j] = max(dp[k][j-1] * a[k + 1][i])  </p><p>代码:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div></pre></td><td class="code"><pre><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line">    <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"></div><div class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> dp[<span class="number">25</span>][<span class="number">25</span>];</div><div class="line">    <span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">25</span>][<span class="number">25</span>];</div><div class="line">    <span class="keyword">char</span> str[<span class="number">25</span>];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">int</span> len, t, m;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;t);</div><div class="line">        <span class="keyword">while</span> (t--)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, str, &amp;m);</div><div class="line">            len = <span class="built_in">strlen</span>(str);</div><div class="line">            m--;</div><div class="line">            <span class="built_in">memset</span> (a, <span class="number">0</span>, <span class="keyword">sizeof</span>(a));</div><div class="line">            <span class="built_in">memset</span> (dp, <span class="number">0</span>, <span class="keyword">sizeof</span>(dp));</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)          <span class="comment">//先对a进行预处理，减少复杂度，a[i][j]表示第i段到第j段的数值</span></div><div class="line">            &#123;</div><div class="line">                a[i][i] = str[i] - <span class="string">'0'</span>;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; len; j++)</div><div class="line">                &#123;</div><div class="line">                    a[i][j] = a[i][j - <span class="number">1</span>] * <span class="number">10</span> + str[j] - <span class="string">'0'</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)</div><div class="line">            &#123;</div><div class="line">                dp[i][<span class="number">0</span>] = a[<span class="number">0</span>][i];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = j; i &lt; len; i++)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; i; k++)</div><div class="line">                    &#123;</div><div class="line">                        dp[i][j] = max(dp[i][j], dp[k][j - <span class="number">1</span>] * a[k + <span class="number">1</span>][i]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, dp[len - <span class="number">1</span>][m]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">```  </div><div class="line"></div><div class="line">### Halloween Costumes  </div><div class="line">题目链接：&lt;http:<span class="comment">//lightoj.com/login_main.php?url=volume_showproblem.php?problem=1422&gt;  </span></div><div class="line"></div><div class="line">题意：给你n天需要穿的衣服的样式，每次可以套着穿衣服，脱掉的衣服就不能再穿了，问至少要带多少条衣服才能参加所有宴会  </div><div class="line"></div><div class="line">分析：首先我们使用dp[a][b]来表示区间 a~b 的答案，那么对于第 i 件衣服，我们有</div><div class="line"></div><div class="line">①：如果在之后的区间内都不再重复利用这件衣服，那么明显  dp[i][j] = dp[i+<span class="number">1</span>][j] + <span class="number">1</span>;</div><div class="line"></div><div class="line">②：如果在之后的区间 i+<span class="number">1</span> ~ j 中存在一件衣服 k 是跟 i 一样的，那么我们便可以考虑是不是可以将i那件衣服在k这个地方重复利用，</div><div class="line">那么转移方程为  dp[i][j] = min(dp[i][j] , dp[i][k<span class="number">-1</span>]+dp[k+<span class="number">1</span>][j])  </div><div class="line"></div><div class="line">代码:</div><div class="line">```cpp</div><div class="line">    #include&lt;cstdio&gt;</div><div class="line">    #include&lt;algorithm&gt;</div><div class="line"></div><div class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> n;</div><div class="line">    <span class="keyword">int</span> a[<span class="number">105</span>];</div><div class="line">    <span class="keyword">int</span> dp[<span class="number">105</span>][<span class="number">105</span>];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">int</span> t;</div><div class="line">        <span class="keyword">int</span> cas = <span class="number">0</span>;</div><div class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</div><div class="line">        <span class="keyword">while</span>(t--)</div><div class="line">        &#123;</div><div class="line">            cas ++;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i;j &lt;= n;j++)</div><div class="line">                &#123;</div><div class="line">                    dp[i][j] = j-i+<span class="number">1</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = n<span class="number">-1</span>;i &gt;= <span class="number">1</span>;i--)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;j &lt;= n;j++)</div><div class="line">                &#123;</div><div class="line">                    dp[i][j] = dp[i+<span class="number">1</span>][j] + <span class="number">1</span>;</div><div class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> k = i+<span class="number">1</span>;k &lt;= j;k++)</div><div class="line">                    &#123;</div><div class="line">                        <span class="keyword">if</span>(a[i] == a[k])</div><div class="line">                        &#123;</div><div class="line">                            dp[i][j] = min(dp[i][j],dp[i][k<span class="number">-1</span>] + dp[k+<span class="number">1</span>][j]);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="built_in">printf</span>(<span class="string">"Case %d: %d\n"</span>,cas,dp[<span class="number">1</span>][n]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">```  </div><div class="line"></div><div class="line">### Cheapest Palindrome</div><div class="line">题目链接:&lt;http:<span class="comment">//poj.org/problem?id=3280&gt;  </span></div><div class="line"></div><div class="line">题意:给你m个字符，其中有n种字符，每种字符都有两个值，分别是增加一个这样的字符的代价，删除一个这样的字符的代价，让你求将原先给出的那串字符变成回文串的最小代价。  </div><div class="line"></div><div class="line">分析:dp[i][j]代表区间i到区间j成为回文串的最小代价，那么对于dp[i][j]有三种情况：</div><div class="line"></div><div class="line"><span class="number">1</span>、dp[i+<span class="number">1</span>][j]表示区间i到区间j已经是回文串了的最小代价，那么对于s[i]这个字母，我们有两种操作，删除与添加，对应有两种代价，dp[i+<span class="number">1</span>][j]+add[s[i]],dp[i+<span class="number">1</span>][j]+del[s[i]]，取这两种代价的最小值；</div><div class="line"></div><div class="line"><span class="number">2</span>、dp[i][j<span class="number">-1</span>]表示区间i到区间j<span class="number">-1</span>已经是回文串了的最小代价，那么对于s[j]这个字母，同样有两种操作，dp[i][j<span class="number">-1</span>]+add[s[j]],dp[i][j<span class="number">-1</span>]+del[s[j]]，取最小值</div><div class="line"></div><div class="line"><span class="number">3</span>、若是s[i]==s[j]，dp[i+<span class="number">1</span>][j<span class="number">-1</span>]表示区间i+<span class="number">1</span>到区间j<span class="number">-1</span>已经是回文串的最小代价，那么对于这种情况，我们考虑dp[i][j]与dp[i+<span class="number">1</span>][j<span class="number">-1</span>]的大小</div><div class="line"></div><div class="line">然后dp[i][j]取上面这些情况的最小值  </div><div class="line"></div><div class="line">代码  </div><div class="line">```cpp</div><div class="line">    #include&lt;cstdio&gt;</div><div class="line">    #include&lt;algorithm&gt;</div><div class="line">    #include&lt;cstring&gt;</div><div class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line">    <span class="keyword">int</span> dp[<span class="number">2005</span>][<span class="number">2005</span>],add[<span class="number">27</span>],del[<span class="number">27</span>];</div><div class="line">    <span class="keyword">char</span> s[<span class="number">2005</span>];</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        <span class="keyword">int</span> n,m;</div><div class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m)&gt;<span class="number">0</span>)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s+<span class="number">1</span>);</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">char</span> ch[<span class="number">10</span>];</div><div class="line">                <span class="keyword">int</span> tmp1,tmp2;</div><div class="line">                <span class="built_in">scanf</span>(<span class="string">"%s%d%d"</span>,ch,&amp;tmp1,&amp;tmp2);</div><div class="line">                add[ch[<span class="number">0</span>]-<span class="string">'a'</span>+<span class="number">1</span>]=tmp1;</div><div class="line">                del[ch[<span class="number">0</span>]-<span class="string">'a'</span>+<span class="number">1</span>]=tmp2;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=m<span class="number">-1</span>;i&gt;=<span class="number">1</span>;i--)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;=m;j++)</div><div class="line">                &#123;</div><div class="line">                    dp[i][j]=min(dp[i+<span class="number">1</span>][j]+add[s[i]-<span class="string">'a'</span>+<span class="number">1</span>],dp[i+<span class="number">1</span>][j]+del[s[i]-<span class="string">'a'</span>+<span class="number">1</span>]);</div><div class="line">                    <span class="keyword">int</span> tmp=min(dp[i][j<span class="number">-1</span>]+add[s[j]-<span class="string">'a'</span>+<span class="number">1</span>],dp[i][j<span class="number">-1</span>]+del[s[j]-<span class="string">'a'</span>+<span class="number">1</span>]);</div><div class="line">                    dp[i][j]=min(dp[i][j],tmp);</div><div class="line">                    <span class="keyword">if</span>(s[i]==s[j])</div><div class="line">                    dp[i][j]=min(dp[i][j],dp[i+<span class="number">1</span>][j<span class="number">-1</span>]);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[<span class="number">1</span>][m]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><h3 id="Treats-for-the-Cows"><a href="#Treats-for-the-Cows" class="headerlink" title="Treats for the Cows"></a>Treats for the Cows</h3><p>题目链接:<a href="http://poj.org/problem?id=3186" target="_blank" rel="external">http://poj.org/problem?id=3186</a>  </p><p>题意:只能从一个序列的左右两端取数字，且取出的第i个数乘i,求乘积相加的最大值  </p><p>分析:设dp[i][j]为取到剩余区间为[i,j]的最大值，可能由d[i+1][j]或者d[i][j-1]转移而来<br>转移方程：dp[i][j]=max(dp[i+1][j]+p[i]<em>(n+i-j),dp[i][j-1]+p[j]</em>(n+i-j));  其中n-(j-i)是第几次取  </p><p>代码<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">int</span> p[<span class="number">2010</span>];</div><div class="line"><span class="keyword">int</span> dp[<span class="number">2010</span>][<span class="number">2010</span>];</div><div class="line"><span class="keyword">int</span> n;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n)!=EOF)</div><div class="line">    &#123;</div><div class="line">        <span class="built_in">memset</span>(dp,<span class="number">0</span>,<span class="keyword">sizeof</span>(dp));</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</div><div class="line">        &#123;</div><div class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;p[i]);</div><div class="line">            dp[i][i]= n * p[i];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> ans=<span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n;i&gt;=<span class="number">1</span>;i--)</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=n;j++)</div><div class="line">        &#123;</div><div class="line">           dp[i][j]=max(dp[i+<span class="number">1</span>][j]+p[i]*(n+i-j),dp[i][j<span class="number">-1</span>]+p[j]*(n+i-j));</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dp[<span class="number">1</span>][n]);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;区间dp，顾名思义就是在一段区间上进行动态规划。对于每段区间，他们的最优值都是由几段更小区间的最优值得到，是分治思想的一种应用，将一个区间问
      
    
    </summary>
    
    
      <category term="算法" scheme="http://habitdiary.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SSH远程登录实现本地机和服务器的文件传输</title>
    <link href="http://habitdiary.cn/2017/10/07/SSH%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E5%AE%9E%E7%8E%B0%E6%9C%AC%E5%9C%B0%E6%9C%BA%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/"/>
    <id>http://habitdiary.cn/2017/10/07/SSH远程登录实现本地机和服务器的文件传输/</id>
    <published>2017-10-07T07:55:41.000Z</published>
    <updated>2017-10-07T08:57:11.077Z</updated>
    
    <content type="html"><![CDATA[<p>SSH是一种以安全、加密方式连接远程主机或服务器的方法。SSH服务器接受从有SSH的客户机的连接，允许操作者象在本地一样地登录系统。如果已经搭建了SSH远程登录服务，如何实现本地机和远程服务器的文件交互呢？以下操作基于远程机已经安装了SSH服务器端，如果没有安装，详细步骤见:  <a href="http://habitdiary.cn/2017/10/07/%E5%9C%A8Ubuntu%E4%B8%8B%E9%80%9A%E8%BF%87SSH%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/#more">在Ubuntu下通过SSH连接远程服务器</a>  </p><h3 id="1-用SSH登录远程ubuntu主机"><a href="#1-用SSH登录远程ubuntu主机" class="headerlink" title="(1)用SSH登录远程ubuntu主机"></a>(1)用SSH登录远程ubuntu主机</h3><p>假设远程Ubuntu主机安装了SSH服务器端。远程Ubuntu主机的IP为：118.89.223.117,用户名为ubuntu<br>我们在命令行输入以下命令来连接：<br><code>ssh -l ubuntu 118.89.223.117</code><br>之后提示输入密码，回车，登录成功，注意此时已经切换到了远程机的终端<br><img src="/2017/10/07/SSH远程登录实现本地机和服务器的文件传输/1.png" alt="fail">  </p><h3 id="2-从远程Ubuntu主机下载文件-文件夹到本地-scp"><a href="#2-从远程Ubuntu主机下载文件-文件夹到本地-scp" class="headerlink" title="(2)从远程Ubuntu主机下载文件/文件夹到本地(scp)"></a>(2)从远程Ubuntu主机下载文件/文件夹到本地(scp)</h3><p>语法格式：scp -r 远程主机用户名@远程主机ip:待下载文件的远程主机目录路径 保存下载文件的本地文件路径  </p><p>我们先在远程机的/home/ubuntu目录下新建一个名为hello的文件<br><img src="/2017/10/07/SSH远程登录实现本地机和服务器的文件传输/4.png" alt="fail"><br>要下载文件到本地,我们要结束SSH连接,切换到本地机,输入<code>eixt</code>或<code>quit</code>即可  </p><p>我们将远程机的hello文件下载到本地的/home/xiejunyu/local目录下，输入密码后提示文件下载成功<br><img src="/2017/10/07/SSH远程登录实现本地机和服务器的文件传输/5.png" alt="fail">  </p><p>我们进入本地目录验证一下<br><img src="/2017/10/07/SSH远程登录实现本地机和服务器的文件传输/6.png" alt="fail">  </p><p>hello文件的确下载到了本地</p><h3 id="3-从本地向远程ubuntu主机上传文件-文件夹-scp"><a href="#3-从本地向远程ubuntu主机上传文件-文件夹-scp" class="headerlink" title="(3)从本地向远程ubuntu主机上传文件/文件夹(scp)"></a>(3)从本地向远程ubuntu主机上传文件/文件夹(scp)</h3><p>语法格式：scp -r 待上传的本地文件路径 远程主机用户名@远程主机ip:用于保存文件的远程主机目录路径  </p><p>假设要上传一个在/home/xiejunyu/local目录下的test.txt文件,远程主机用户名为ubuntu,ip为118.89.223.117,保存到远程主机的/home/ubuntu目录下  </p><p>要上传本地文件,我们要结束SSH连接,切换到本地机,输入<code>eixt</code>或<code>quit</code>即可<br>然后输入命令<code>$ scp -r /home/xiejunyu/local/test.txt ubuntu@118.89.223.117:/home/ubuntu/</code>，输入密码后提示文件上传成功<br><img src="/2017/10/07/SSH远程登录实现本地机和服务器的文件传输/2.png" alt="fail">  </p><p>我们通过SSH登录到远程主机验证一下,<code>pwd</code>打印当前所在位置，发现我们处于/home/ubuntu目录下,<code>ls</code>显示当前目录下的文件，我们发现有test.txt文件,说明本地的test.txt已经上传到了远程机的/home/ubuntu目录下<br><img src="/2017/10/07/SSH远程登录实现本地机和服务器的文件传输/3.png" alt="fail">  </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SSH是一种以安全、加密方式连接远程主机或服务器的方法。SSH服务器接受从有SSH的客户机的连接，允许操作者象在本地一样地登录系统。如果已经搭建了SSH远程登录服务，如何实现本地机和远程服务器的文件交互呢？以下操作基于远程机已经安装了SSH服务器端，如果没有安装，详细步骤见
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://habitdiary.cn/tags/Linux/"/>
    
      <category term="服务器" scheme="http://habitdiary.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>在Ubuntu下通过SSH连接远程服务器</title>
    <link href="http://habitdiary.cn/2017/10/07/%E5%9C%A8Ubuntu%E4%B8%8B%E9%80%9A%E8%BF%87SSH%E8%BF%9E%E6%8E%A5%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://habitdiary.cn/2017/10/07/在Ubuntu下通过SSH连接远程服务器/</id>
    <published>2017-10-07T07:20:37.000Z</published>
    <updated>2017-10-07T08:51:40.404Z</updated>
    
    <content type="html"><![CDATA[<p>登录远程服务器是搭建、维护网站的常用操作。在Windows环境下我们会选择XSHELL等工具进行登录，而在Linux环境下可以通过终端快捷登录。</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><p>装有Ubuntu操作系统的本地机和远程腾讯云服务器各一台</p><h3 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一:"></a>步骤一:</h3><p>打开腾讯云官网，登录云服务器，在服务器上安装SSH服务器端<br><code>$ sudo apt-get install aptitude</code><br><code>$ sudo aptitude install openssh-server</code> </p><h3 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二:"></a>步骤二:</h3><p>启动ssh-server<br><code>$ /etc/init.d/ssh restart</code>  </p><h3 id="步骤三："><a href="#步骤三：" class="headerlink" title="步骤三："></a>步骤三：</h3><p>确认ssh-server已经正常工作<br><code>$ netstat -tlp</code><br>tcp6 0 0 *:ssh *:* LISTEN -<br>看到上面一行说明ssh-server已经在运行了  </p><h3 id="步骤四："><a href="#步骤四：" class="headerlink" title="步骤四："></a>步骤四：</h3><p>在本地机终端通过ssh登录服务器<br><code>$ ssh -l 远程服务器用户名 服务器ip地址</code><br>接下来会提示输入密码，然后就能成功登录到服务器上了</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="http://blog.csdn.net/wh_19910525/article/details/7585257" target="_blank" rel="external">http://blog.csdn.net/wh_19910525/article/details/7585257</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;登录远程服务器是搭建、维护网站的常用操作。在Windows环境下我们会选择XSHELL等工具进行登录，而在Linux环境下可以通过终端快捷登录。&lt;/p&gt;
&lt;h3 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://habitdiary.cn/tags/Linux/"/>
    
      <category term="服务器" scheme="http://habitdiary.cn/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>强制修改ubuntu密码</title>
    <link href="http://habitdiary.cn/2017/10/06/%E5%BC%BA%E5%88%B6%E4%BF%AE%E6%94%B9ubuntu%E5%AF%86%E7%A0%81/"/>
    <id>http://habitdiary.cn/2017/10/06/强制修改ubuntu密码/</id>
    <published>2017-10-06T07:02:39.000Z</published>
    <updated>2017-10-07T08:50:10.892Z</updated>
    
    <content type="html"><![CDATA[<p> 今天想要修改ubuntu的密码,结果设置了两次密码，一次提示密码长度太短,一次提示强度不够。<br> <img src="/2017/10/06/强制修改ubuntu密码/fail.png" alt="fail"><br> 查了资料,总结出两种解决方法:<br> 方法一:加上sudo权限<br> <img src="/2017/10/06/强制修改ubuntu密码/method1.png" alt="fail"><br> 方法二:切换到root用户<br>  <img src="/2017/10/06/强制修改ubuntu密码/method2.png" alt="fail"><br>  mark一下</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 今天想要修改ubuntu的密码,结果设置了两次密码，一次提示密码长度太短,一次提示强度不够。&lt;br&gt; &lt;img src=&quot;/2017/10/06/强制修改ubuntu密码/fail.png&quot; alt=&quot;fail&quot;&gt;&lt;br&gt; 查了资料,总结出两种解决方法:&lt;br&gt; 方法一:
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://habitdiary.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Markdown学习笔记</title>
    <link href="http://habitdiary.cn/2017/10/05/Markdown%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://habitdiary.cn/2017/10/05/Markdown学习笔记/</id>
    <published>2017-10-05T08:36:06.000Z</published>
    <updated>2017-10-06T07:07:18.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h3 id="花了近两天时间终于搭建好了我的个人博客-因为Hexo是基于Markdown语法写作的博客，之前对Markdown一窍不通，于是赶快找了几篇大牛的博客学习，从中整理出了Hexo博客写作的常用语法。当然Markdown还有很多高级的用法-例如绘制流程图、时序图，插入数学公式等，由于在博客写作中不多用，文中没有提到。"><a href="#花了近两天时间终于搭建好了我的个人博客-因为Hexo是基于Markdown语法写作的博客，之前对Markdown一窍不通，于是赶快找了几篇大牛的博客学习，从中整理出了Hexo博客写作的常用语法。当然Markdown还有很多高级的用法-例如绘制流程图、时序图，插入数学公式等，由于在博客写作中不多用，文中没有提到。" class="headerlink" title="　　花了近两天时间终于搭建好了我的个人博客,因为Hexo是基于Markdown语法写作的博客，之前对Markdown一窍不通，于是赶快找了几篇大牛的博客学习，从中整理出了Hexo博客写作的常用语法。当然Markdown还有很多高级的用法,例如绘制流程图、时序图，插入数学公式等，由于在博客写作中不多用，文中没有提到。"></a>　　花了近两天时间终于搭建好了我的个人博客,因为Hexo是基于Markdown语法写作的博客，之前对Markdown一窍不通，于是赶快找了几篇大牛的博客学习，从中整理出了Hexo博客写作的常用语法。当然Markdown还有很多高级的用法,例如绘制流程图、时序图，插入数学公式等，由于在博客写作中不多用，文中没有提到。</h3><h1 id="1-标题"><a href="#1-标题" class="headerlink" title="1. 标题"></a>1. 标题</h1><h2 id="标题根据字体大小分级产生层次，有两种写法："><a href="#标题根据字体大小分级产生层次，有两种写法：" class="headerlink" title="标题根据字体大小分级产生层次，有两种写法："></a>标题根据字体大小分级产生层次，有两种写法：</h2><h2 id="写法一："><a href="#写法一：" class="headerlink" title="写法一："></a>写法一：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">一级标题</div><div class="line">==================</div><div class="line">二级标题</div><div class="line">---------------------</div></pre></td></tr></table></figure><p>效果如下：</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h2 id="写法二："><a href="#写法二：" class="headerlink" title="写法二："></a>写法二：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 一级标题</div><div class="line">## 二级标题  </div><div class="line">### 三级标题  </div><div class="line">#### 四级标题</div><div class="line">##### 五级标题  </div><div class="line">###### 六级标题</div></pre></td></tr></table></figure><p>效果如下：</p><h1 id="一级标题-1"><a href="#一级标题-1" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题-1"><a href="#二级标题-1" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p><strong><em>可见<code>#</code>的数量越多标题字号越小，要特别注意<code>#</code>和标题之间要留一个空格!</em></strong></p><h1 id="2-内联样式"><a href="#2-内联样式" class="headerlink" title="2. 内联样式"></a>2. 内联样式</h1><h2 id="内联样式能描述文字的粗细、倾斜程度等"><a href="#内联样式能描述文字的粗细、倾斜程度等" class="headerlink" title="内联样式能描述文字的粗细、倾斜程度等"></a>内联样式能描述文字的粗细、倾斜程度等</h2><h2 id="2-1-语义标记："><a href="#2-1-语义标记：" class="headerlink" title="2.1 语义标记："></a>2.1 语义标记：</h2><p>代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">*这是斜体*</div><div class="line">_这是斜体_</div><div class="line">**这是粗体**  </div><div class="line">***这是加粗斜体***  </div><div class="line">**_这是加粗斜体_**</div><div class="line">~~这是删除线~~</div></pre></td></tr></table></figure></p><p>效果如下:  </p><p><em>这是斜体</em><br><em>这是斜体</em><br><strong>这是粗体</strong><br><strong><em>这是加粗斜体</em></strong><br><strong><em>这是加粗斜体</em></strong><br><del>这是删除线</del>  </p><p>可见语义标记允许叠加</p><h2 id="2-2-语义标签"><a href="#2-2-语义标签" class="headerlink" title="2.2 语义标签"></a>2.2 语义标签</h2><p>代码:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;i&gt;这是斜体&lt;/i&gt;  </div><div class="line">&lt;b&gt;这是粗体&lt;/b&gt;  </div><div class="line">&lt;i&gt;&lt;b&gt;这是粗斜体&lt;/b&gt;&lt;/i&gt;  </div><div class="line">&lt;em&gt;这是强调&lt;/em&gt;  </div><div class="line">这是上标 Z&lt;sup&gt;a&lt;/sup&gt;  </div><div class="line">这是下标 Z&lt;sub&gt;a&lt;/sub&gt;</div></pre></td></tr></table></figure></p><p>效果如下：  </p><p><i>这是斜体</i><br><b>这是粗体</b><br><i><b>这是粗斜体</b></i><br><em>这是强调</em><br>这是上标 Z<sup>a</sup><br>这是下标 Z<sub>a</sub>  </p><p>　　可见语义标签可以嵌套，特别要注意<code>&lt;em&gt;&lt;/em&gt;</code>标签虽然显示的效果和斜体完全一致,但由于其具有强调语义,建议只在需要强调时使用,如果只是想使用斜体,尽量使用<code>&lt;i&gt;&lt;/i&gt;</code>标签替代</p><h1 id="3-引用"><a href="#3-引用" class="headerlink" title="3. 引用"></a>3. 引用</h1><h2 id="3-1-单行式"><a href="#3-1-单行式" class="headerlink" title="3.1 单行式"></a>3.1 单行式</h2><p>  代码:  </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; hello world</div></pre></td></tr></table></figure><p>  效果如下:  </p><blockquote><p>hello world  </p></blockquote><h2 id="3-2-多行式"><a href="#3-2-多行式" class="headerlink" title="3.2 多行式"></a>3.2 多行式</h2><p>  代码: </p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; hello world  </div><div class="line">&gt; hello world  </div><div class="line">&gt; hello world</div></pre></td></tr></table></figure><p> 效果如下:  </p><blockquote><p>hello world<br>hello world<br>hello world</p></blockquote><h2 id="3-3-嵌套式"><a href="#3-3-嵌套式" class="headerlink" title="3.3 嵌套式"></a>3.3 嵌套式</h2><p>  代码:  </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&gt; aaaaaaaaa</div><div class="line">&gt;&gt; bbbbbbbbb</div><div class="line">&gt;&gt;&gt; cccccccccc</div></pre></td></tr></table></figure><p>  效果如下:  </p><blockquote><p>aaaaaaaaa</p><blockquote><p>bbbbbbbbb</p><blockquote><p>cccccccccc</p></blockquote></blockquote></blockquote><h1 id="4-换行与段落缩进"><a href="#4-换行与段落缩进" class="headerlink" title="4. 换行与段落缩进"></a>4. 换行与段落缩进</h1><h2 id="换行-在行末敲两个空格和一个回车"><a href="#换行-在行末敲两个空格和一个回车" class="headerlink" title="换行:  在行末敲两个空格和一个回车"></a>换行:  <strong><em>在行末敲两个空格和一个回车</em></strong></h2><h2 id="段落缩进-将输入法切换为全角后敲击两次空格即可完成两个字符的缩进"><a href="#段落缩进-将输入法切换为全角后敲击两次空格即可完成两个字符的缩进" class="headerlink" title="段落缩进:  将输入法切换为全角后敲击两次空格即可完成两个字符的缩进"></a>段落缩进:  <strong><em>将输入法切换为全角后敲击两次空格即可完成两个字符的缩进</em></strong></h2><h1 id="5-行内标记与代码块"><a href="#5-行内标记与代码块" class="headerlink" title="5. 行内标记与代码块"></a>5. 行内标记与代码块</h1><h2 id="5-1-行内标记-用前后各一个-标记代码块将变成一行"><a href="#5-1-行内标记-用前后各一个-标记代码块将变成一行" class="headerlink" title="5.1 行内标记(用前后各一个`标记代码块将变成一行)"></a>5.1 行内标记(用前后各一个`标记代码块将变成一行)</h2><p>  代码:  </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">标记之外`hello world`标记之外</div></pre></td></tr></table></figure><p>  效果如下:<br>   标记之外<code>hello world</code>标记之外  </p><h2 id="5-2-代码块-用于插入各类型的代码"><a href="#5-2-代码块-用于插入各类型的代码" class="headerlink" title="5.2 代码块(用于插入各类型的代码)"></a>5.2 代码块(用于插入各类型的代码)</h2><p>   方法一 (使用前后各一个```包裹代码生成块):<br>   效果如下:  </p>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;div&gt;   </div><div class="line"> &lt;div&gt;&lt;/div&gt;</div><div class="line"> &lt;div&gt;&lt;/div&gt;</div><div class="line"> &lt;div&gt;&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure><p>  方法二 (使用Tab缩进):<br>  代码及效果如下:<br>  我是文字…  </p><pre><code>&lt;div&gt;     &lt;div&gt;&lt;/div&gt;  &lt;div&gt;&lt;/div&gt;  &lt;div&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><p> <em>注意要在前文后空一行再进行Tab缩进</em></p><p> 方法三 (自定义语法)：<br> <strong>即在前一个```后面附加语言名称如html、javascript等,可以产生语法高亮</strong><br> 效果如下：<br> html代码块</p><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>   </div><div class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure><p>javascript代码块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</div><div class="line">num += i;</div><div class="line"> &#125;</div><div class="line"><span class="built_in">console</span>.log(num);</div></pre></td></tr></table></figure><h1 id="6-超链接"><a href="#6-超链接" class="headerlink" title="6. 超链接"></a>6. 超链接</h1><p>　　Markdown支持两种形式的链接语法: 行内式和参考式两种形式，行内式一般使用较多。  </p><h2 id="6-1-行内式"><a href="#6-1-行内式" class="headerlink" title="6.1 行内式"></a>6.1 行内式</h2><h2 id="语法说明"><a href="#语法说明" class="headerlink" title="语法说明:"></a>语法说明:</h2><ul><li>[]里写链接文字，()里写链接地址, ()中的”“中可以为链接指定title属性，title属性可加可不加。title属性的效果是鼠标悬停在链接上会出现指定的 title文字。<code>[链接文字](链接地址 “链接标题”)</code>这样的形式。链接地址与链接标题前有一个空格。  </li></ul><p>代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">这是[XJY&apos;s Blog](http://habitdiary.cn)  </div><div class="line">这是[XJY&apos;s Blog](http://habitdiary.cn &quot;XJY&apos;s Blog&quot;)</div></pre></td></tr></table></figure><p>效果如下:<br>这是<a href="http://habitdiary.cn">XJY’s Blog</a><br>这是<a href="http://habitdiary.cn" title="XJY&#39;s Blog">XJY’s Blog</a>  </p><h2 id="6-2-参考式"><a href="#6-2-参考式" class="headerlink" title="6.2 参考式"></a>6.2 参考式</h2><p>参考式超链接一般用在学术论文上面，或者另一种情况，如果某一个链接在文章中多处使用，那么使用引用 的方式创建链接将非常好，它可以让你对链接进行统一的管理。</p><h2 id="语法说明-1"><a href="#语法说明-1" class="headerlink" title="语法说明:"></a>语法说明:</h2><p>参考式链接分为两部分，文中的写法 [链接文字][链接标记]，在文本的任意位置添加[链接标记]:链接地址 “链接标题”，链接地址与链接标题前有一个空格。</p><p>如果链接文字本身可以做为链接标记，你也可以写成[链接文字][]<br>[链接文字]：链接地址的形式，见代码的最后一行。  </p><p>代码:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">我经常去的网站有[Baidu][1]、[有道云笔记][2]以及[IMOOC][3],[有道云笔记][2]是不错的[网站][]。</div><div class="line">[1]:http://www.baidu.com &quot;Baidu&quot;</div><div class="line">[2]:http://note.youdao.com/ &quot;youdaonote&quot;</div><div class="line">[3]:http://www.imooc.com/ &quot;IMOOC&quot;</div><div class="line">[网站]:http://note.youdao.com/ &quot;youdaonote&quot;</div></pre></td></tr></table></figure><p>效果如下:  </p><p>我经常去的网站有<a href="http://pic.sc.chinaz.com/files/pic/pic9/201603/apic19710.jpg" title="爱琴海" target="_blank" rel="external">Baidu</a>、<a href="http://note.youdao.com/" title="youdaonote" target="_blank" rel="external">有道云笔记</a>以及<a href="http://www.imooc.com/" title="IMOOC" target="_blank" rel="external">IMOOC</a>,<a href="http://note.youdao.com/" title="youdaonote" target="_blank" rel="external">有道云笔记</a>是不错的<a href="http://note.youdao.com/" title="youdaonote" target="_blank" rel="external">网站</a>。</p><h2 id="6-3-自动链接"><a href="#6-3-自动链接" class="headerlink" title="6.3 自动链接"></a>6.3 自动链接</h2><h2 id="语法说明-2"><a href="#语法说明-2" class="headerlink" title="语法说明:"></a>语法说明:</h2><p>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用&lt;&gt;包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：<br>代码:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;http://example.com/&gt;</div><div class="line">&lt;address@example.com&gt;</div></pre></td></tr></table></figure><p>效果如下:<br><a href="http://example.com/" target="_blank" rel="external">http://example.com/</a><br><a href="&#x6d;&#97;&#105;&#108;&#116;&#x6f;&#58;&#x61;&#x64;&#x64;&#x72;&#101;&#115;&#115;&#64;&#x65;&#x78;&#x61;&#x6d;&#x70;&#108;&#x65;&#46;&#99;&#111;&#109;">&#x61;&#x64;&#x64;&#x72;&#101;&#115;&#115;&#64;&#x65;&#x78;&#x61;&#x6d;&#x70;&#108;&#x65;&#46;&#99;&#111;&#109;</a></p><h1 id="7-列表"><a href="#7-列表" class="headerlink" title="7. 列表"></a>7. 列表</h1><h2 id="7-1-无序列表"><a href="#7-1-无序列表" class="headerlink" title="7.1 无序列表"></a>7.1 无序列表</h2><p>代码:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">* 吃饭</div><div class="line">* 睡觉</div><div class="line">* 打代码</div></pre></td></tr></table></figure><p>效果如下:  </p><ul><li>吃饭</li><li>睡觉</li><li>打代码  </li></ul><h2 id="7-2-有序列表"><a href="#7-2-有序列表" class="headerlink" title="7.2 有序列表"></a>7.2 有序列表</h2><p>代码:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">1. 把冰箱门打开</div><div class="line">2. 把大象关进去</div><div class="line">3. 把冰箱门带上</div></pre></td></tr></table></figure><p>效果如下:  </p><ol><li>把冰箱门打开</li><li>把大象关进去</li><li>把冰箱门带上</li></ol><h2 id="7-3-序表嵌套"><a href="#7-3-序表嵌套" class="headerlink" title="7.3 序表嵌套"></a>7.3 序表嵌套</h2><p>代码:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">1. one</div><div class="line">    1. one-1</div><div class="line">    2. two-2</div><div class="line">2. two </div><div class="line">    * two-1</div><div class="line">    * two-2</div></pre></td></tr></table></figure><p>效果如下:  </p><ol><li>one<ol><li>one-1</li><li>two-2</li></ol></li><li>two <ul><li>two-1</li><li>two-2  </li></ul></li></ol><h2 id="7-4-任务列表"><a href="#7-4-任务列表" class="headerlink" title="7.4 任务列表"></a>7.4 任务列表</h2><p>代码(方括号里是x表示打勾,空格表示为空):  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- [x] 选项一</div><div class="line">- [ ] 选项二  </div><div class="line">- [ ]  选项三</div></pre></td></tr></table></figure><p>效果如下:  </p><ul><li style="list-style: none"><input type="checkbox" checked> 选项一</li><li style="list-style: none"><input type="checkbox"> 选项二  </li><li style="list-style: none"><input type="checkbox"> 选项三</li></ul><h1 id="8-插入图片"><a href="#8-插入图片" class="headerlink" title="8. 插入图片"></a>8. 插入图片</h1><p>图片的创建方式与超链接相似，而且和超链接一样也有两种写法，行内式和参考式写法。</p><p>语法中图片Alt的意思是如果图片因为某些原因不能显示，就用定义的图片Alt文字来代替图片。 图片Title则和链接中的Title一样，表示鼠标悬停与图片上时出现的文字。 Alt 和 Title 都不是必须的，可以省略，但建议写上。</p><h2 id="8-1-内联式"><a href="#8-1-内联式" class="headerlink" title="8.1 内联式"></a>8.1 内联式</h2><h2 id="语法说明-图片Alt-图片地址-“图片Title”"><a href="#语法说明-图片Alt-图片地址-“图片Title”" class="headerlink" title="语法说明:![图片Alt](图片地址 “图片Title”)"></a>语法说明:<code>![图片Alt](图片地址 “图片Title”)</code></h2><p>代码:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">爱琴海</div><div class="line">![爱琴海](http://pic.sc.chinaz.com/files/pic/pic9/201603/apic19710.jpg &quot;爱琴海&quot;)</div></pre></td></tr></table></figure><p>效果如下:<br>爱琴海<br><img src="http://pic.sc.chinaz.com/files/pic/pic9/201603/apic19710.jpg" alt="爱琴海" title="爱琴海">  </p><h2 id="8-2-参照式"><a href="#8-2-参照式" class="headerlink" title="8.2 参照式"></a>8.2 参照式</h2><h2 id="语法说明-3"><a href="#语法说明-3" class="headerlink" title="语法说明:"></a>语法说明:</h2><p>在文档要插入图片的地方写<code>![图片Alt][标记]</code>，在文档的最后写上[标记]:图片地址 “Title”<br>代码:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">爱琴海</div><div class="line">![爱琴海][1]</div><div class="line">[1]:http://pic.sc.chinaz.com/files/pic/pic9/201603/apic19710.jpg &quot;爱琴海&quot;</div></pre></td></tr></table></figure><p>效果如下:<br>爱琴海<br><img src="http://pic.sc.chinaz.com/files/pic/pic9/201603/apic19710.jpg" alt="爱琴海" title="爱琴海"></p><h4 id="说明-如果要在Hexo中插入本地图片-具体方法见博客：http-blog-csdn-net-sugar-rainbow-article-details-57415705"><a href="#说明-如果要在Hexo中插入本地图片-具体方法见博客：http-blog-csdn-net-sugar-rainbow-article-details-57415705" class="headerlink" title="说明: 如果要在Hexo中插入本地图片,具体方法见博客：http://blog.csdn.net/sugar_rainbow/article/details/57415705"></a>说明: 如果要在Hexo中插入本地图片,具体方法见博客：<a href="http://blog.csdn.net/sugar_rainbow/article/details/57415705" target="_blank" rel="external">http://blog.csdn.net/sugar_rainbow/article/details/57415705</a></h4><h1 id="9-插入视频"><a href="#9-插入视频" class="headerlink" title="9. 插入视频"></a>9. 插入视频</h1><p>如果要插入的视频来源于优酷，爱奇艺，Youtube(播放时需要翻墙)等支持iframe的视频网站，那么你可以尝试在markdown编辑器中插入以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;http://tv.sohu.com/upload/static/share/share_play.html#90268916_9365222_0_9001_0&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;</div></pre></td></tr></table></figure></p><p>效果如下:  </p><iframe width="560" height="315" src="http://www.miaopai.com/show/9Sve8-3osRBmmpEvONt~uKP-WbvOSRLH.htm" frameborder="0" allowfullscreen></iframe><h2 id="mark一下第一次写博客遇到的神坑"><a href="#mark一下第一次写博客遇到的神坑" class="headerlink" title="mark一下第一次写博客遇到的神坑:"></a>mark一下第一次写博客遇到的神坑:</h2><ul><li>在转义包裹代码块的三个反引号```时,应该在每一个反引号之前都加反斜杠,刚开始只在开头加了一个，编辑器预览正确，但发布后排版就混乱了，找了好久才发现错误。 </li></ul><h4 id="最后要感谢提供参考的大牛博客"><a href="#最后要感谢提供参考的大牛博客" class="headerlink" title="最后要感谢提供参考的大牛博客:"></a>最后要感谢提供参考的大牛博客:</h4><ul><li><a href="http://blog.leanote.com/post/freewalk/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C#title-13" target="_blank" rel="external">http://blog.leanote.com/post/freewalk/Markdown-%E8%AF%AD%E6%B3%95%E6%89%8B%E5%86%8C#title-13</a>  </li><li><a href="http://www.jianshu.com/p/b03a8d7b1719" target="_blank" rel="external">http://www.jianshu.com/p/b03a8d7b1719</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;h3 id=&quot;花了近两天时间终于搭建好了我的个人博客-因为Hexo是基于Markdown语法写作的博客，之前对Markdown一窍不通，于是赶快
      
    
    </summary>
    
    
      <category term="Markdown" scheme="http://habitdiary.cn/tags/Markdown/"/>
    
  </entry>
  
</feed>
